---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app tdarr
  namespace: media
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    image:
      repository: haveagitgat/tdarr
    # tag: 2.00.20.1
      tag: 2.13.01
      pullPolicy: IfNotPresent
    env:
      TZ: ${TZ}
      serverIP: 0.0.0.0
      ffmpegPath: /usr/local/bin/ffmpeg
    podSecurityContext:
      # Required for passthrough of /dev/dri devices from NFD
      # https://dgpu-docs.intel.com/installation-guides/ubuntu/ubuntu-focal.html
      supplementalGroups:
        - 44
        - 109
    node:
      enabled: true
      id: node
      image:
        repository: haveagitgat/tdarr_node
      # tag: 2.00.20.1
        tag: 2.13.01
        pullPolicy: IfNotPresent
    persistence:
      data:
        enabled: true
        mountPath: /app/server
        existingClaim: tdarr-config-v1
      shared:
        enabled: true
        type: nfs
        server: ${NFS_SERVER}
        path: ${NFS_MEDIA}/cache
        mountPath: /shared
      media:
        enabled: true
        type: nfs
        path: /volume1/Media
        server: ${NFS_SERVER}
        mountPath: /media
    service:
      main:
        type: LoadBalancer
        loadBalancerIP: "${METALLB_TDARR}"
        externalIPs: ["${METALLB_TDARR}"]
        externalTrafficPolicy: Local
#   service:
#     main:
        ports:
          http:
            port: 8265
          server:
            enabled: true
            protocol: TCP
            port: 8266
    ingress:
      main:
        enabled: true
        ingressClassName: "internal"
        annotations:
#         cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/icon: alpha-t-circle
          hajimari.io/group: media
        hosts:
          - host: tdarr.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - tdarr.${SECRET_DOMAIN}
#           secretName: "tdarr-tls"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: nodetype
                  operator: In
                  values:
                    - worker
                  # - "k8s-worker1"
                  # - "k8s-worker2"
                  # - "k8s-worker3"
    resources: {}
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: tdarr-worker
